{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Description": "Template to create a serverless infrastructure",

  "Parameters": {
    "originAccessIdentity": {
      "Description": "OAL for cloud drstribution",
      "Type": "String",
      "Default": "origin-access-identity/cloudfront/34CD7HCQYO051R"
    },
    "madeBy": {
      "Description": "made by",
      "Type": "String",
      "Default": "luis.espinoza@facware.com"
    }
    
  },

  "Resources": {
    "s3Bucket": {
        "Type": "AWS::S3::Bucket",
        "Properties": {
            "BucketName": "Bucket1",
            "PublicAccessBlockConfiguration" : {
              "BlockPublicAcls" : true,
              "BlockPublicPolicy" : true,
              "IgnorePublicAcls" : true,
              "RestrictPublicBuckets" : true
            },
            "Tags":[
              { "Key" : "owner", "Value" : "Chino" }
            ],
            "WebsiteConfiguration": {
              "IndexDocument": "index.html"
            } 
        }
    },

    "iamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
          "AssumeRolePolicyDocument": { 
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com",
                    "edgelambda.amazonaws.com"
                  ]
                },
                "Action": "sts:AssumeRole"
              }
            ]
          },
          "Description": "Handle Dynamodb, lambda edge, execute lambda",
          "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/AWSLambdaExecute",
            "arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess"
          ],
          "Path": "/",
          "RoleName": "role1"
    },

    "lambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "lambda-sourcecode",
          "S3Key": "lambda.zip"
        },
        "Handler": "assembly::namespace.LambdaEntryPoint::FunctionHandlerAsync",
        "Role":  {
          "Fn::GetAtt": [
              "iamRole",
              "Arn"
          ]
        },
        "Runtime": "dotnetcore3.1",
        "FunctionName": "api-lambda",
        "MemorySize": 128,
        "Timeout": 5,
        "Description": "API Serverless",
        "Tags":[
          { "Key" : "owner", "Value" : "Chino" }
        ]
      }
    },

    "apiGateway": {
      "Type" : "AWS::ApiGateway::RestApi",
      "Properties" : {
          "Description" : "Rest API",
          "Name" :  "apigateway",
          "Tags":[
            { "Key" : "owner", "Value" : "Chino" }
          ]
        }
    },

    "apiGatewayResourceApi": {
      "Type" : "AWS::ApiGateway::Resource",
      "Properties" : {
          "RestApiId" : { "Ref": "apiGateway" },
          "ParentId" : {
            "Fn::GetAtt": [
                "apiGateway",
                "RootResourceId"
            ]
          },
          "PathPart" : "api"
      },
      "DependsOn": [
        "apiGateway"
      ]
    },
    
    "apiGatewayResourceEmployee": {
      "Type" : "AWS::ApiGateway::Resource",
      "Properties" : {
          "RestApiId" : { "Ref": "apiGateway" },
          "ParentId" : { "Ref": "apiGatewayResourceApi" },
          "PathPart" : "employees"
      },
      "DependsOn": [
        "apiGatewayResourceApi"
      ]
    },

    "apiGatewayResourceProxy": {
      "Type" : "AWS::ApiGateway::Resource",
      "Properties" : {
          "RestApiId" : { "Ref": "apiGateway" },
          "ParentId" : { "Ref": "apiGatewayResourceEmployee" },
          "PathPart" : "{proxy+}"
      },
      "DependsOn": [
        "apiGatewayResourceEmployee"
      ]
    },

    "proxy": {
      "Type" : "AWS::ApiGateway::Method",
      "Properties" : {
          "AuthorizationType": "NONE",
          "HttpMethod" : "ANY",
          "Integration" : {
            "IntegrationHttpMethod" : "ANY",
            "Type" : "AWS_PROXY",
            "Uri" : {
              "Fn::Sub": [
                  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${arnlambda}/invocations",
                  {
                      
                      "arnlambda": {
                          "Fn::GetAtt": [
                              "lambdaFunction",
                              "Arn"
                          ]
                      }
                  }
              ]
            }
          },
          "OperationName" : "proxy path",
          "ResourceId" : { "Ref": "apiGatewayResourceProxy" },
          "RestApiId" : { "Ref": "apiGateway" }
      },
      "DependsOn": [
        "apiGatewayResourceProxy"
      ]
    },

    "stagingDeploy": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
          "Description": "production deployment",
          "RestApiId": { "Ref": "apiGateway" },
          "StageName": "stg"
      },
      "DependsOn": [
          "apiGateway",
          "proxy"
      ]
    },

    "productionDeploy": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
          "Description": "production deployment",
          "RestApiId": { "Ref": "apiGateway" },
          "StageName": "prd"
      },
      "DependsOn": [
          "apiGateway",
          "proxy"
      ]
    },

    "cloudfrontDistribution": {
        "Type": "AWS::CloudFront::Distribution",
        "Properties": {
          "DistributionConfig": {
            "CacheBehaviors" : [ {
              "AllowedMethods" : [ "GET", "HEAD" ],
              "CachedMethods" : [ "GET", "HEAD" ],
              "Compress" : false,
              "DefaultTTL" : 0,
              "ForwardedValues" : {
                "QueryString" : "true",
                "Cookies" : { "Forward" : "none" }
              },
              "MaxTTL" : 0,
              "MinTTL" : 0,
              "PathPattern" : "*",
              "SmoothStreaming" : false,
              "TargetOriginId" : { "Ref": "s3Bucket" },
              "ViewerProtocolPolicy" : "redirect-to-https"
            } ],
            "Comment" : "Cloud front ditribution",
            "DefaultCacheBehavior" : {
              "AllowedMethods" : [ "GET", "HEAD" ],
              "CachedMethods" : [ "GET", "HEAD" ],
              "Compress" : false,
              "DefaultTTL" : 0,
              "ForwardedValues" : {
                "QueryString" : "true",
                "Cookies" : { "Forward" : "none" }
              },
              "MaxTTL" : 0,
              "MinTTL" : 0,
              "SmoothStreaming" : false,
              "TargetOriginId" : { "Ref": "s3Bucket" },
              "ViewerProtocolPolicy" : "redirect-to-https"
            },
            "DefaultRootObject" : "index.html",
            "Enabled" : true,
            "HttpVersion" : "http2",
            "IPV6Enabled" : true,
            "Origins" : [ {
              "DomainName" : {
                "Fn::GetAtt": [
                    "s3Bucket",
                    "DomainName"
                ]
              },
              "Id" : { "Ref": "s3Bucket" },
              "S3OriginConfig" : {
                "OriginAccessIdentity" : { "Ref": "originAccessIdentity" }
              }
            } ],
            "PriceClass" : "PriceClass_All",
            "ViewerCertificate" : { "CloudFrontDefaultCertificate" : "true" }
          },
          "Tags":[
            { "Key" : "owner", "Value" : "Chino" }
          ]
        }
    },


    "dyanmoDbTable":{
    "Type" : "AWS::DynamoDB::Table",
    "Properties" : {
        "AttributeDefinitions" : [ 
          {
            "AttributeName" : "EmployeeID",
            "AttributeType" : "S"
          }
        ],
        "BillingMode" : "PROVISIONED",
        "KeySchema" : [
          {
            "AttributeName" : "EmployeeID",
            "KeyType" : "HASH"
          }
        ],
        "PointInTimeRecoverySpecification" : {
          "PointInTimeRecoveryEnabled" : false
        },
        "ProvisionedThroughput" : {
          "ReadCapacityUnits" : 5,
          "WriteCapacityUnits" : 5
        },
        "TableName" :"dynamodb",
        "Tags":[
          { "Key" : "owner", "Value" : "Chino" }
        ]
      }
    },
    
    "lambdaPermissions": {
      "Type" : "AWS::Lambda::Permission",
      "Properties" : {
        "Action" : "lambda:Invoke",
        "FunctionName" : { "Ref": "lambdaFunction" },
        "Principal" : "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", 
          ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "apiGateway"}, "/*"]
        ]}
      },
      "DependsOn": [
        "apiGateway",
        "lambdaFunction"
      ]
    }
  }
}